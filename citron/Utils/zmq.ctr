import
  Library/Foreign/Interop/C.
#:language XFrozen

var zmqfns is [
    'zmq_ctx_new', 'zmq_socket', 'zmq_close', 'zmq_ctx_destroy',
    'zmq_bind',
    'zmq_recv', 'zmq_send',
    'zmq_getsockopt', 'zmq_setsockopt',
    'zmq_strerror'
].

var zmqconsts is [
    'ZMQ_REP', 'ZMQ_REQ', 'ZMQ_PUB', 'ZMQ_SUB',
    'ZMQ_ROUTER', 'ZMQ_DEALER',
    'ZMQ_SNDMORE', 'ZMQ_DONTWAIT',
    'ZMQ_AFFINITY', 'ZMQ_BACKLOG', 'ZMQ_CONNECT_TIMEOUT', 'ZMQ_CURVE_PUBLICKEY',
    'ZMQ_CURVE_SECRETKEY', 'ZMQ_CURVE_SERVERKEY', 'ZMQ_FD', 'ZMQ_EVENTS',
    'ZMQ_GSSAPI_PLAINTEXT', 'ZMQ_GSSAPI_PRINCIPAL', 'ZMQ_GSSAPI_SERVER',
    'ZMQ_GSSAPI_SERVICE_PRINCIPAL', 'ZMQ_HANDSHAKE_IVL', 'ZMQ_IDENTITY',
    'ZMQ_IMMEDIATE', 'ZMQ_INVERT_MATCHING', 'ZMQ_IPV4ONLY', 'ZMQ_IPV6',
    'ZMQ_LAST_ENDPOINT', 'ZMQ_LINGER', 'ZMQ_MAXMSGSIZE', 'ZMQ_MECHANISM',
    'ZMQ_MULTICAST_HOPS', 'ZMQ_MULTICAST_MAXTPDU', 'ZMQ_PLAIN_PASSWORD',
    'ZMQ_PLAIN_SERVER', 'ZMQ_PLAIN_USERNAME', 'ZMQ_USE_FD', 'ZMQ_RATE',
    'ZMQ_RCVBUF', 'ZMQ_RCVHWM', 'ZMQ_RCVMORE', 'ZMQ_RCVTIMEO', 'ZMQ_RECONNECT_IVL',
    'ZMQ_RECONNECT_IVL_MAX', 'ZMQ_RECOVERY_IVL', 'ZMQ_SNDBUF', 'ZMQ_SNDHWM',
    'ZMQ_SNDTIMEO', 'ZMQ_SOCKS_PROXY', 'ZMQ_TCP_KEEPALIVE', 'ZMQ_TCP_KEEPALIVE_CNT',
    'ZMQ_TCP_KEEPALIVE_IDLE', 'ZMQ_TCP_KEEPALIVE_INTVL', 'ZMQ_TCP_MAXRT',
    'ZMQ_THREAD_SAFE', 'ZMQ_TOS', 'ZMQ_TYPE', 'ZMQ_ZAP_DOMAIN', 'ZMQ_VMCI_BUFFER_SIZE',
    'ZMQ_VMCI_BUFFER_MIN_SIZE', 'ZMQ_VMCI_BUFFER_MAX_SIZE', 'ZMQ_VMCI_CONNECT_TIMEOUT'
].

Inject importDefines: zmqconsts fromHeaders: ['zmq.h'].
Inject importFunctionsOrTypes: zmqfns fromHeaders: ['zmq.h'] andLibraries: ['zmq'].

var zmq_strerror_s_ is Inject new linkInLibrary: 'zmq', compile: '
#include <zmq.h>
char* get() {
  char* r = (char*)zmq_strerror(errno);
  return r;
}
', symbol: 'get'.
var zmq_strerror_s_c is CIF new setABI: 0 return: CTypes pointer argTypes: [].
var zmq_strerror_s is \:_ zmq_strerror_s_c call: zmq_strerror_s_ withArgs: [].

var ZMQ_BUF_SIZE is 4096 * 2.
var zmq_buffer_new is {:size
  ^CTypes allocateBytes: size.
}.
var zmq_recv_str is {:socket
  var buf is frozen _ is zmq_buffer_new[const ZMQ_BUF_SIZE].
  var len is const zmq_recv[socket, buf, const ZMQ_BUF_SIZE].
  len < 0 ifTrue: {
    thisBlock error: 'zmq error ${{zmq_strerror_s[] readCString}}$'.
  }.
  ^buf readBytesAsString: len.
}.

var zmq_recv_parts is {:self:socket:parts
  var parts is parts or: Array new.
  # times times: {
  var part is const zmq_recv_str[socket].
  # Pen writeln: 'received $$part on socket $$socket'.
  parts push: part.
  var opt is CTypes sint32.
  var optl is CTypes sint32 set: 4.
  var res is const zmq_getsockopt[socket, ZMQ_RCVMORE, opt getRawAddress, optl getRawAddress].
  res = -1 ifTrue: {
    thisBlock error: zmq_strerror_s[] readCString.
  }.
  # Pen writeln: 'recvmore $$res $$socket $$opt $$optl'.
  opt get > 0 ifTrue: {
    self[socket, parts].
  }.
  # }.
  # Pen writeln: 'Received ${{parts count}}$ parts in total'.
  ^parts.
}.

var zmq_race_recv is {:*socks_and_procs
  var sock is Nil.
  var proc is Nil.
  var buf is frozen buf is CTypes allocateBytes: 2048.
  {^sock isNil.} whileTrue: {
    socks_and_procs each_v: {:sock_and_proc
      sock is sock_and_proc @ 0.
      proc is sock_and_proc @ 1.
      var rlen is zmq_recv[sock, buf, 2048, ZMQ_DONTWAIT].
      rlen = -1 ifFalse: {
        proc[rlen, buf readBytesAsString: rlen].
        True break.
      }.
      sock is Nil.
    }.
    Clock wait: 40 msec.
  }.
}.

var zmq_send_all is {:self:socket:data:flags
  var datalength is data count.
  data each: {:idx:data
    var nflags is (datalength - 1 = idx either: flags or: (flags bitOr: ZMQ_SNDMORE)).
    var res is zmq_send[socket, data, data bytes, nflags].
    # Pen cyan write: '[CitronZMQ] ', resetColor writeln: 'sent %d bytes (%d bytes expected)' % [res, data bytes].
  }.
}.
